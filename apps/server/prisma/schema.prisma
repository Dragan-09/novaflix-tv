generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password      String  
  role          Role      @default(USER)
  type          Type?
  verified      Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  plans         PlansOnUsers[]
  verifications UserVerification[]
  Credentials   Credentials[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

enum Type {
  LOCAL
  GOOGLE
}

model Plan {
  id                Int @id @default(autoincrement())
  name              String
  description       String
  price             Float
  price_description String
  price_id          String
  image             String?
  duration_days     Int

  users             PlansOnUsers[]
  @@map("plans")
}

model PlansOnUsers {
  id              Int       @id @default(autoincrement())
  uuid            String    @db.Uuid @unique
  plan_id         Int
  user_id         Int?
  user_email      String
  status          Status    @default(ON_PROCESS)
  subscription_id String?
  assigned_at     DateTime  @default(now())
  ends_at         DateTime
  type            SubType   @default(NORMAL)
  credentials     Credentials?

  user User? @relation(fields: [user_id], references: [id])
  plan Plan @relation(fields: [plan_id], references: [id])

  @@map("subscriptions")
}

enum Status {
  ON_PROCESS
  ACTIVE
  ENDED
}

enum SubType {
  NORMAL
  TRIAL
}

model Category {
  id    Int @id @default(autoincrement())
  name  String
  icon  String

  @@map("categories")
}

model Channel {
  id    Int @id @default(autoincrement())
  name  String
  logo  String

  @@map("channels")
}

model Feature {
  id    Int   @id @default(autoincrement())
  name  String
  icon  String
}

model UserVerification {
  encrypted_string  String @unique @default(uuid())
  user_id           Int
  created_at        DateTime @default(now())
  expires_at        DateTime

  user User @relation(fields: [user_id], references: [id])
  @@map("users_verification")
}

model Credentials {
  id          Int     @id @default(autoincrement())
  subscription_uuid String @db.Uuid @unique
  user_id     Int
  username    String
  password    String
  email_sent  Boolean @default(false)

  subscription PlansOnUsers @relation(fields: [subscription_uuid], references: [uuid])
  user User @relation(fields: [user_id], references: [id])
}